Node.js事件循环

Node.js是单进程单线程应用程序,但是因为V8引擎提供的异步执行回调接口,
通过这些接口可以处理大量的并发,所有性能非常高

Node.js几乎每一个API都是支持回调函数的

Node.js基本上所有的事件机制都是用设计模式中的观察者模式实现的

Node.js单线程类似进入一个while(true)的事件循环,直到事件观察者退出
每一个异步事件都生成一个事件观察者,如果有事件发生就调用该回调函数

Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列
events 模块只提供了一个对象： events.EventEmitter
EventEmitter 的核心就是事件触发与事件监听器功能的封装

大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类
为什么要这样做呢？原因有两点：
首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发生应该是一个对象的方法
其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系
