传统组件的问题和解决方案
1. 全局定义的组件必须保证组件的名称不重复
2. 字符串模板缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 \
3. 不支持 CSS 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏
4. 没有构建步骤限制，只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器（如：Babel）

解决方案
针对传统组件的问题，Vue 提供了一个解决方案 —— 使用 Vue 单文件组件。

单文件组件的组成结构
template 组件的模板区域
script 业务逻辑区域
style 样式区域

webpack 中配置 vue 组件的加载器
    ① 运行 npm i vue-loader vue-template-compiler -D 命令
    ② 在 webpack.config.js 配置文件中，添加 vue-loader 的配置项如下：
        const VueLoaderPlugin = require('vue-loader/lib/plugin')
        module.exports = {
            module: {
                rules: [
                    // ... 其它规则
                    { test: /\.vue$/, loader: 'vue-loader' }
                ]
            },
            plugins: [
            // ... 其它插件
            new VueLoaderPlugin() // 请确保引入这个插件！
            ] 
        }
在 webpack 项目中使用 vue
① 运行 npm i vue –S 安装 vue
② 在 src -> index.js 入口文件中，通过 import Vue from 'vue' 来导入 vue 构造函数
③ 创建 vue 的实例对象，并指定要控制的 el 区域
④ 通过 render 函数渲染 App 根组件
