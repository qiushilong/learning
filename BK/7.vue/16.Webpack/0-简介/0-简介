web开发面临的困境:
    文件依赖关系错综复杂
    静态资源请求效率低
    模块化支持不友好
    浏览器对高级Javascript特性兼容程度较低

webpack是一个流行的前端项目构建工具(打包工具),
可以解决当前web开发中所面临的困境。
webpack提供了友好的模块化支持,以及代码压缩混淆、处理js兼容问题、性能优化等强大的功能,从而让程序员把工作的重心放到具体的功能实现上,
提高了开发效率和项目的可维护性。

webpack的基本使用
    1.创建列表隔行变色项目
        新建项目空白目录,并运行npm init -y命令,初始化包管理配置文件package.json
        新建src源代码目录
        新建src -> index.html首页
        初始化首页基本的结构
        运行npm install jquery -S命令,安装jQuery
        通过模块化的形式,实现列表隔行变色效果
    2.在项目中安装和配置webpack
        运行npm install webpack webpack-cli -D命令,安装 webpack相关的包
        在项目根目录中,创建名为webpack.config.js 的 webpack配置文件
        在webpack的配置文件中,初始化如下基本配置:
            module.exports = {
                mode: 'development' // mode用来指定构建模式
            }
        在package.json配置文件中的scripts 节点下,新增dev脚本如下:
            "scripts": {
                "dev" : "webpack" // script节点下的脚本,可以通过npm run 执行
                }
        在终端中运行npm run dev命令,启动webpack进行项目打包。
    3．配置打包的入口与出口(非必须)
        webpack的4.x版本中默认约定:
        打包的入口文件为src-> index.js
        打包的输出文件为dist -> main.js
        如果要修改打包的入口与出口,可以在webpack.config.js中新增如下配置信息:
        const path = require ('path')//导入node.js 中专门操作路径的模块
        module.exports = {
            entry: path.join(__dirname,'./src/index.js'),//打包入口文件的路径
            output : {
                path: path.join(__dirname,'./dist'),//输出文件的存放路径
                filename: 'bundle.js'//输出文件的名称
            }
        }
    4.配置webpack的自动打包功能(非必须)
        运行 npm install webpack-dev-server -D命令,安装支持项目自动打包的工具
        修改package.json -> scripts 中的dev命令如下:
            "scripts" : {
                "dev" : "webpack-dev-server" // script 节点下的脚本,可以通过npm run执行
            }
        将src -> index.html 中,script脚本的引用路径,修改为"/buldle.js"
        运行npm run dev命令,重新进行打包
        在浏览器中访问http://localhost:8080 地址,查看自动打包效果
        注意:
            webpack-dev-server会启动一个实时打包的http服务器
            webpack-dev-server 打包生成的输出文件，默认放到了项目根目录中，而且是虚拟的、看不见的
    5．配置html-webpack-plugin生成预览页面
        运行npm install html-webpack-plugin -D命令，安装生成预览页面的插件
        修改webpack.config.js文件头部区域,添加如下配置信息:
        //导入生成预览页面的插件，得到一个构造函数
        const HtmlwebpackP1ugin = require ('html-webpack-plugin')
        const htmlPlugin = new HtmlwebpackPlugin({ //创建插件的实例对象
            template: './src/index.html',//指定要用到的模板文件
            filename: 'index.html'//指定生成的文件的名称，该文件存在于内存中，在目录中不显示
        })
        修改webpack.config.js 文件中向外暴露的配置对象，新增如下配置节点:
        module.exports = {
            plugins: [ htmlPlugin ] // plugins 数组是webpack打包期间会用到的一些插件列表
        }
    6.配置自动打包相关参数
        --open:打包完成后自动打开浏览器界面
        --host ip:配置ip地址
        --port port:配置端口

webpack中的加载器
    1.通过loader打包非js模块
    在实际开发过程中，webpack 默认只能打包处理以 .js 后缀名结尾的模块，
    其他非.js 后缀名结尾的模块，webpack 默认处理不了，需要调用loader加载器才可以正常打包，否则会报错!
    loader加载器可以协助webpack 打包处理特定的文件模块，比如:
    less-loader可以打包处理.less相关的文件
    sass-loader可以打包处理.scss相关的文件
    url-loader可以打包处理css中与ur1路径相关的文件

    2.webpack中类加载器的基本使用
    1)打包处理css文件
    ①运行npm i style-loader css-loader -D命令，安装处理css文件的 1oader
    ②在webpack.config.js 的module -> rules 数组中，添加loader 规则如下:
        //所有第三方文件模块的匹配规则
        module: {
            rules: [
                { test: /\.css$/ , use: ['style-loader", "css-loader']}
            ]
        }
    其中，test表示匹配的文件类型, use表示对应要调用的loader
    注意:
        use数组中指定的loader顺序是固定的
        多个loader 的调用顺序是:从后往前调用
    2)打包处理less文件
    ①运行npm i less-loader less -D命令
    ②在webpack.config.js 的module -> rules 数组中，添加loader 规则如下:
        //所有第三方文件模块的匹配规则
        module: {
            rules: [
                { test: /\.less$/,use: [ 'style-loader', 'css-loader','less-loader'] }
            ]
        }
    3)打包处理sass文件
    ①运行npm i sass-loader node-sass -D命令
    ②在webpack.config.js 的module -> rules 数组中，添加loader 规则如下:
        //所有第三方文件模块的匹配规则
        module: {
            rules: [
                { test: /\.scss$/,use: [ 'style-loader', 'css-loader','sass-loader'] }
            ]
        }
    4.配置postCSS自动添加css的兼容前缀
    ①运行npm i postcss-loader autoprefixer -D命令
    ②在项目根目录中创建postcss的配置文件 postcss.config.js，并初始化如下配置:
        const autoprefixer = require ( 'autoprefixer')//导入自动添加前缀的插件
        module.exports = {
            plugins: [ autoprefixer ]//挂载插件
        }
    ③在webpack.config.js 的 module -> rules 数组中，修改 css的 loader 规则如下:
        module: {
            rules: [
                { test:/\.css$/,use: ['style-loader'，'css-loader','postcss-loader'] }
            ]
        }
    5.打包样式表中的图片和字体文件
    ①运行npm i url-loader file-loader -D命令
    ②在 webpack.config.js 的module -> rules 数组中，添加loader规则如下;
        module: {
            rules: [
                {
                    test: /\.jpg|png|gif|bmplttf|eot|svg|woff|woff2$/ ,
                    use: "ur1-loader?limit=16940"
                }
            ]
        }
    其中?之后的是loader的参数项。
    limit用来指定图片的大小，单位是字节(byte),只有小于limit 大小的图片，才会被转为 base64图片
    6. 打包处理 js 文件中的高级语法
    ① 安装babel转换器相关的包：npm i babel-loader @babel/core @babel/runtime -D 
    ② 安装babel语法插件相关的包：npm i @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties –D 
    ③ 在项目根目录中，创建 babel 配置文件 babel.config.js 并初始化基本配置如下：
        module.exports = {
            presets: [ '@babel/preset-env' ],
            plugins: [ '@babel/plugin-transform-runtime', '@babel/plugin-proposal-class-properties']
        }
    ④ 在 webpack.config.js 的 module -> rules 数组中，添加 loader 规则如下：
        // exclude 为排除项，表示 babel-loader 不需要处理 node_modules 中的 js 文件
        { test: /\.js$/, use: 'babel-loader', exclude: /node_modules/ }
    6.webpack 中配置 vue 组件的加载器
    ① 运行 npm i vue-loader vue-template-compiler -D 命令
    ② 在 webpack.config.js 配置文件中，添加 vue-loader 的配置项如下：
        const VueLoaderPlugin = require('vue-loader/lib/plugin')
        module.exports = {
            module: {
                rules: [
                    // ... 其它规则
                    { test: /\.vue$/, loader: 'vue-loader' }
                ]
            },
            plugins: [
            // ... 其它插件
            new VueLoaderPlugin() // 请确保引入这个插件！
            ] 
        }
    
webpack打包发布
上线之前需要通过webpack将应用进行整体打包，可以通过 package.json 文件配置打包命令：
 // 在package.json文件中配置 webpack 打包命令
 // 该命令默认加载项目根目录中的 webpack.config.js 配置文件
 "scripts": {
    // 用于打包的命令
    "build": "webpack -p",
    // 用于开发调试的命令
    "dev": "webpack-dev-server --open --host 127.0.0.1 --port 3000",
 }