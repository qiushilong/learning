目标
    能够知道有哪些模块化的相关规范
    能够使用webpack
    能够使用Vue单文件组件
    能够使用Vue脚手架
    能够使用Element-UI

传统开发模式的主要问题
    1.命名冲突
        多个js文件之间重名变量覆盖问题
    2.文件依赖
        js文件之间无法实现相互引用

通过模块化解决上述问题
模块化就是把单独的一个功能封装到一个模块（文件)中，
模块之间相互隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块
模块化开发的好处:方便代码的重用，从而提升开发效率，并且方便后期的维护

浏览器端模块化规范
1.AMD
2.CMD

服务器端模块化规范
nodejs的CommonJS规范
模块分为单文件模块与包
模块成员导出: module.exports和exports
模块成员导入: require ('模块标识符')

大一统的模块化规范----ES6模块化
在Es6模块化规范诞生之前，Javascript 社区已经尝试并提出了AMD、CMD、commonJs等模块化规范。
但是，这些社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块化标准，例如:AMD和CMD适用于浏览器端的Javascript模块化
commonJs 适用于服务器端的Javascript模块化
因此，Es6语法规范中，在语言层面上定义了ES6模块化规范，是浏览器端与服务器端通用的模块化开发规范。

Es6模块化规范中定义:
    每个js文件都是一个独立的模块
    导入模块成员使用import关键字
    暴露模块成员使用export关键字
